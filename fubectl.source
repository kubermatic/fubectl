# helper functions
alias _inline_fzf="fzf --multi --ansi -i -1 --height=50% --reverse -0 --header-lines=1 --inline-info --border"
alias _inline_fzf_nh="fzf --multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border"

# [k] like g for git but 233% as effective!
alias k="kubectl"

show_help() {
    echo "This command will make it easier to use kubectl"
    echo "Usage: kdes -n istio-system -c dev-gke deploy"
    echo "Usage: kget -c playground namespace"
}

parse_args() {
    PARAMS=""
    unset CONTEXT
    unset NAMESPACE
    unset OBJECT
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|-/?|--help)
                show_help
                ;;
            -c|--context|--cluster)
                export CONTEXT=$2
                test $FUBECTL_DEBUG && echo "CONTEXT IS $CONTEXT"
                shift
                ;;
            -n|--namespace)
                export NAMESPACE=$2
                test $FUBECTL_DEBUG && echo "NAMESPACE IS $NAMESPACE"
                shift
                ;;
            -?*)
                test $FUBECTL_DEBUG && echo "End of args"
                ;;
            --)
                shift
                break
                ;;
            *)
                #TODO: Object can't be "all"
                export OBJECT=$1
                test $FUBECTL_DEBUG && echo "OBJECT IS $OBJECT"
        esac
        shift
    done
    test  "$CONTEXT" ||  { echo "No context was set. Set it with -c/--context" && return 1}
    test  "$OBJECT" ||  { echo "No object was set. Pass it in at the end of the command" && return 1;}
}

run_kubectl_cmd() {
    export COMMAND=$1
    shift
    test $FUBECTL_DEBUG && echo "COMMAND IS $COMMAND"
    test $FUBECTL_DEBUG && echo $*
    export FLAGS=$1
    test $FUBECTL_DEBUG && echo "FLAGS IS $FLAGS"
    test $FUBECTL_DEBUG && echo $*
    shift
    parse_args $* || return 1

    if [[ $FLAGS == " " ]]; then
        KUBECTL_INPUT=("--context" "$CONTEXT" "--namespace" "$NAMESPACE" "$COMMAND" "$OBJECT")
    else
        KUBECTL_INPUT=("--context" "$CONTEXT" "--namespace" "$NAMESPACE" "$COMMAND" "$FLAGS" "$OBJECT")
    fi

    case "$OBJECT" in
    nodes|no|node|ns|namespace|namespaces)
        kubectl get --context "$CONTEXT" "$OBJECT" | _inline_fzf | awk '{print $1}' | xargs kubectl "${KUBECTL_INPUT[@]}"
    ;;
    *)
        kubectl get --namespace "$NAMESPACE" --context "$CONTEXT" "$OBJECT" | _inline_fzf | awk '{print $1}' | xargs kubectl "${KUBECTL_INPUT[@]}"
    ;;
    esac
}
#
# [kdebug] start debugging in cluster
kdebug() {
    args=($* " ")
    parse_args ${args}
    kubectl run --context $CONTEXT -n $NAMESPACE test --rm --restart=Never -it --image=ubuntu -- bash
}

# [kube_ctx_name] get the current context
kube_ctx_name() {
    kubectl config current-context
}

# [kube_ctx_namespace] get current namespace
kube_ctx_namespace() {
    default_ns="$(kubectl config view --minify|grep namespace: |sed 's/namespace: //g'|tr -d ' ')"
    default_ns="${default_ns:-default}"
    echo "$default_ns"
}


# [kwatch] watch resource
# Note this doesn't use run_kubectl_command b/c of the watch wrapping xargs
kwatch() {
    parse_args $*
    case "$OBJECT" in
    nodes|no|node|ns|namespace|namespaces)
        kubectl get --context "$CONTEXT" "$OBJECT" | _inline_fzf | awk '{print $1}' | xargs watch kubectl --context "$CONTEXT" get "$OBJECT"
    ;;
    *)
        kubectl get --context "$CONTEXT" -n "$NAMESPACE" "$OBJECT" | _inline_fzf | awk '{print $1}' | xargs watch kubectl get --context "$CONTEXT" -n "$NAMESPACE" "$OBJECT"
    ;;
    esac
}

# [kget] get a resource by its YAML
# kget deploy groot
# kget pods
kget() {
    args=("get" "-oyaml" $*)
    run_kubectl_cmd ${args}
}

# [kdes] describe resource
kdes() {
    args=("describe" " " $*)
    run_kubectl_cmd ${args}
}

# TODO: This seems like it's asking for trouble
# Why are you deleting so often that you need a fuzzy finder for it?
# Before you use this, stop, rethink your life. How did you get here in the first place?
# [kdel] delete resource
kdel() {
    args=("delete" " " $*)
    run_kubectl_cmd ${args}
}

# [klog] fetch log from container
klog() {
    args=($* "na")
    parse_args ${args} || return 1

    pod_name=$(kubectl get --namespace "$NAMESPACE" --context "$CONTEXT" pods | _inline_fzf | awk '{print $1}')
    containers=$(echo "$pod_name" | xargs kubectl get po --context "$CONTEXT" -n "$NAMESPACE" -o=jsonpath='{.spec.containers[*].name}' )
    container_choice=$(echo "$containers" |  tr ' ' "\n" | _inline_fzf_nh)
    kubectl --context "$CONTEXT" -n "$NAMESPACE" logs "$pod_name" -c "$container_choice"
}

# [kex] execute command in container
kex() {
    args=($* "na")
    parse_args ${args} || return 1
    #TODO: this breaks proper argument parsing by making it so the command has to be at the end.
    to_run=$5

    pod_name=$(kubectl get --namespace "$NAMESPACE" --context "$CONTEXT" pods | _inline_fzf | awk '{print $1}')
    echo $pod_name
    containers=$(echo "$pod_name" | xargs kubectl get po --context "$CONTEXT" -n "$NAMESPACE" -o=jsonpath='{.spec.containers[*].name}' )
    container_choice=$(echo "$containers" |  tr ' ' "\n" | _inline_fzf_nh)
    kubectl --context "$CONTEXT" -n "$NAMESPACE" exec "$pod_name" -c "$container_choice" -- "$to_run"
}

# [kfor] port-forward a container port to your local machine
kfor() {
    args=($* "na")
    parse_args ${args} || return 1
    #TODO: this breaks proper argument parsing by making it so the command has to be at the end.
    port=$5

    pod_name=$(kubectl get --namespace "$NAMESPACE" --context "$CONTEXT" pods | _inline_fzf | awk '{print $1}')
    kubectl port-forward --context "$CONTEXT" --namespace "$NAMESPACE" "$pod_name" "$port"
}


# [ksec] base64 decrypt secrets
ksec() {
    args=($* "na")
    parse_args ${args} || return 1
    secret=$(kubectl --context "$CONTEXT" --namespace "$NAMESPACE" get secret | _inline_fzf | awk '{print $1}')
    kubectl get secret --context "$CONTEXT" -n "$NAMESPACE" "$secret" -o json | jq -r '.data | to_entries[] | "\n----\n\(.key): \(.value | @base64d)"'
}


# [kcm] Show config maps
kcm() {
    args=($* "na")
    parse_args ${args} || return 1
    cm=$(kubectl get cm --context "$CONTEXT" --namespace "$NAMESPACE" | _inline_fzf | awk '{print $1}')
    kubectl get cm --context "$CONTEXT" -n "$NAMESPACE" "$cm" -o json | jq -r '.data | to_entries[] | "\n----\n\(.key): \(.value)"'
}

# [kcl] context list
alias kcl='kubectl config get-contexts'

# [kcs] context set
kcs() {
    if [ "$1" ]; then
        context=$1
        kubectl config get-contexts | grep -q $context || return 255
    else
        context="$(kubectl config get-contexts | _inline_fzf | awk '{print $1}')"
    fi
    eval kubectl config set current-context "${context}"
}

# [kcns] context set default namespace
kcns() {
    local ns=$1
    if [ ! -n "$1" ]; then
        ns="$(kubectl get ns | _inline_fzf | awk '{print $1}')"
    fi
    eval kubectl config set-context "$(kubectl config current-context)" --namespace="${ns}"
}

# [kwns] watch pods in a namespace
kwns() {
    local ns=""
    ns=$(kubectl get ns | _inline_fzf | awk '{print $1}')
    watch kubectl get pod -n "$ns"
}

# [khelp] show this help message
khelp() {
    echo "Usage of fubectl"
    echo
    echo "Reduces repetitive interactions with kubectl"
    echo "Find more information at https://github.com/kubermatic/fubectl"
    echo
    echo "Usage:"
    if [ -n "$ZSH_VERSION" ]
    then
        grep -E '^# \[.+\]' "${(%):-%x}"
    else
        grep -E '^# \[.+\]' "${BASH_SOURCE[0]}"
    fi
}

# ----gcloud-----
# [gssh] allows you to ssh into a GCS instance
gssh() {
    if [[ ! -z "$1" ]]; then
        case "$1" in
         cb|build|common-build)
             PROJECT="common-build"
             ;;
         pg|play|playground)
             PROJECT="strong-keyword-184513"
             ;;
         prod|platform-prod|production)
             PROJECT="platform-prod-399563"
             ;;
         dev|platform-dev|develop)
             PROJECT="platform-dev-788014"
             ;;
         bh-dev|binderhub-dev)
             PROJECT="binderhub-dev"
             ;;
         bh-prod|binderhub-prod)
             PROJECT="binderhub-prod"
             ;;
        esac
    else
        PROJECT=$(gcloud projects  list --format=json | jq -r '.[].projectId' | _inline_fzf)
    fi
    echo "PROJECT IS:  $PROJECT"
    ssh $(gcloud compute instances  list --project $PROJECT | _inline_fzf | awk '{print $4}')
}
