# Helper functions
alias _inline_fzf="fzf --multi --ansi -i -1 --height=50% --reverse -0 --header-lines=1 --inline-info --border"
alias _inline_fzf_nh="fzf --multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border"
function kube_ctx_name {
  echo "$(cat ${KUBECONFIG:-~/.kube/config}|grep current-context|sed 's/current-context: //g'|tr -d ' ')"
}

function kube_ctx_namespace {
  default_ns="$(kubectl config view --minify|grep namespace: |sed 's/namespace: //g'|tr -d ' ')"
  default_ns="${default_ns:-default}"
  echo "$default_ns"
}

# Kubernetes alias section for more suffisticated commands see https://github.com/ahmetb/kubectl-aliases
# like g for git but 233% as effective!
alias k="kubectl"
# Get all pods
alias kall="kubectl get pods --all-namespaces"
# Watch all pods
alias kwall="watch kubectl get pods --all-namespaces"
# Open kubernetes dashboard
alias kp="open 'http://localhost:8001/ui' && kubectl proxy"

# kget (get a resource by its YAML)
kget() {
  case "$1" in
  # TODO Add more
  nodes|no|node|ns|namespace|namespaces)
          kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs kubectl get -o yaml "${1}"
          ;;
  *)
          kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs kubectl get -o yaml "${1}" -n
          ;;
  esac
}

# kdes (describe resource)
kdes() {
  case "$1" in
  # TODO Add more
  nodes|no|node|ns|namespace|namespaces)
          kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs kubectl describe "${1}"
          ;;
  *)
          kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs kubectl describe "${1}" -n
          ;;
  esac
}

# kdel (delete resource)
kdel() {
  case "$1" in
  # TODO Add more
  nodes|no|node|ns|namespace|namespaces)
          kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs kubectl describe "${1}"
          ;;
  *)
          kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs kubectl delete "${1}" -n
          ;;
  esac
}

# klog (fetch log from container)
klog() {
  local line_count=10
  if [[ $1 =~ '^[-]{0,1}[0-9]+$' ]] ; then
    line_count="$1"
    shift
  fi

  arg_pair="$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')"
  pods_out="$(echo $arg_pair | xargs kubectl get po -o=jsonpath='{.spec.containers[*].name}' -n)"
  pod_choosen="$(echo $pods_out |  tr ' ' "\n" | _inline_fzf_nh)"
  eval kubectl logs -n "${arg_pair} -c ${pod_choosen}" --tail="${line_count}" $@
}

# kex (execute command in container)
kex() {
  arg_pair="$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')"
  pods_out="$(echo $arg_pair | xargs kubectl get po -o=jsonpath='{.spec.containers[*].name}' -n)"
  pod_choosen="$(echo $pods_out |  tr ' ' "\n" | _inline_fzf_nh)"
  eval kubectl exec -it -n "${arg_pair}" -c "${pod_choosen}" -- $1
}

# kfor (port-forward a container port to your local machine)
kfor() {
  if [ ! -n "$1" ]
  then
    echo "Provide a port you want to forward"
    return 255
  fi

  arg_pair="$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')"
  echo "kubectl port-forward -n ${arg_pair} $1"
  eval kubectl port-forward -n "${arg_pair}" $1
}


# ksearch (search for string in resources)
ksearch() {
  search_query="$1"
  for ns in $(kubectl get --export -o=json ns | jq -r '.items[] | .metadata.name');do
    kubectl --namespace="${ns}" get --export -o=json deployment,ingress,daemonset,secrets,configmap,service,serviceaccount,statefulsets,pod,endpoints,customresourcedefinition,events,networkpolicies,persistentvolumeclaims,persistentvolumes,replicasets,replicationcontrollers,statefulsets,storageclasses | \
    jq '.items[]' -c | \
    grep "$search_query" | \
    jq -r  '. | [.kind, .metadata.name] | @tsv' | \
    awk -v prefix="$ns" '{print "kubectl get -n " prefix " " $0}'
  done
}

# kcl (context list)
alias kcl='kubectl config get-contexts'

# kcs (context set)
kcs() {
  context="$(kubectl config get-contexts | _inline_fzf | awk '{print $2}')"
  eval kubectl config set current-context "${context}"
}

# kcns (context set default namespace)
kcns() {
  if [ ! -n "$1" ]
  then
    ns="$(kubectl get ns | _inline_fzf | awk '{print $1}')"
    eval kubectl config set-context "$(kubectl config current-context)" --namespace="${ns}"
  else
    eval kubectl config set-context "$(kubectl config current-context)" --namespace="$1"
  fi
}
# kdebug (start debugging in cluster)
alias kdebug='kubectl run test --rm --restart=Never -it --image=ubuntu -- bash'
