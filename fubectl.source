# helper functions
alias _inline_fzf="fzf --multi --ansi -i -1 --height=50% --reverse -0 --header-lines=1 --inline-info --border"
alias _inline_fzf_nh="fzf --multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border"

_isClusterSpaceObject() {
  obj="$1"
  if [ -z "$obj" ]; then
    echo "please specify a Kubernetes object!"
    exit 1
  fi

  kubectl api-resources --namespaced=false \
        | awk '(apiidx){print substr($0, 0, apiidx),substr($0, kindidx) } (!apiidx){ apiidx=index($0, " APIGROUP");kindidx=index($0, " KIND")}' \
    | grep -iq "\<${obj}\>"
}
# [k] like g for git but 233% as effective!
alias k="kubectl"

# [ka] get all pods in namespace
alias ka="kubectl get pods"

# [kall] get all pods in cluster
alias kall="kubectl get pods --all-namespaces"

# [kwa] watch all pods in the current namespace
alias kwa="watch kubectl get pods"

# [kwall] watch all pods in cluster
alias kwall="watch kubectl get pods --all-namespaces"

# TODO check if this works for macs
# [kp] open kubernetes dashboard with proxy
alias kp="xdg-open 'http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/' & kubectl proxy"

# [kwatch] watch resource
kwatch() {
    if _isClusterSpaceObject $1 ; then
        kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs watch kubectl get "${1}"
    else
        kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs watch kubectl get "${1}" -n
    fi
}

# [kdebug] start debugging in cluster
alias kdebug='kubectl run test --rm --restart=Never -it --image=ubuntu -- bash'

# [kube_ctx_name] get the current context
kube_ctx_name() {
    kubectl config current-context
}

# [kube_ctx_namespace] get current namespace
kube_ctx_namespace() {
    default_ns="$(kubectl config view --minify|grep namespace: |sed 's/namespace: //g'|tr -d ' ')"
    default_ns="${default_ns:-default}"
    echo "$default_ns"
}

# [kget] get a resource by its YAML
kget() {
    if _isClusterSpaceObject $1 ; then
        kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs kubectl get -o yaml "${1}"
    else
        kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs kubectl get -o yaml "${1}" -n
    fi
}

# [ked] edit a resource by its YAML
ked() {
    kind="$1"
    if [ -z "$kind" ]; then
      echo "ked requires resource-type (pod,deployment,...) as argument."
      return
    fi
    if _isClusterSpaceObject $kind ; then
        edit_args=( $(kubectl get "$kind" | _inline_fzf | awk '{print $1}') )
    else
        edit_args=( $(kubectl get "$kind" --all-namespaces | _inline_fzf | awk '{print "-n", $1, $2}') )
    fi
    kubectl edit "$kind" ${edit_args[*]}
}

# [kdes] describe resource
kdes() {
    if _isClusterSpaceObject $1 ; then
        kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs kubectl describe "${1}"
    else
        kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs kubectl describe "${1}" -n
    fi
}

# [kdel] delete resource
kdel() {
    if _isClusterSpaceObject $1 ; then
        kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs -p kubectl delete "${1}"
    else
        kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs -p kubectl delete "${1}" -n
    fi
}

# [klog] fetch log from container
klog() {
    local line_count=10
    if [[ $1 =~ ^[-]{0,1}[0-9]+$ ]]; then
        line_count="$1"
        shift
    fi

    arg_pair=$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')
    pods_out=$(echo "$arg_pair" | xargs kubectl get po -o=jsonpath='{.spec.containers[*].name} {.spec.initContainers[*].name}' -n | sed 's/ $//')
    pod_choosen=$(echo "$pods_out" |  tr ' ' "\n" | _inline_fzf_nh)
    eval kubectl logs -n "${arg_pair} -c ${pod_choosen}" --tail="${line_count}" "$@"
}

# [kex] execute command in container
kex() {
    arg_pair=$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')
    pods_out=$(echo "$arg_pair" | xargs kubectl get po -o=jsonpath='{.spec.containers[*].name}' -n)
    pod_choosen=$(echo "$pods_out" |  tr ' ' "\n" | _inline_fzf_nh)
    eval kubectl exec -it -n "${arg_pair}" -c "${pod_choosen}" -- "$1"
}

# [kfor] port-forward a container port to your local machine
kfor() {
    if [ ! -n "$1" ]; then
        echo "Provide a port you want to forward"
        return 255
    fi

    arg_pair="$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')"
    echo "kubectl port-forward -n ${arg_pair} $1"
    eval kubectl port-forward -n "${arg_pair}" "$1"
}

# [ksearch] search for string in resources
ksearch() {
    search_query="$1"
    for ns in $(kubectl get --export -o=json ns | jq -r '.items[] | .metadata.name'); do
        kubectl --namespace="${ns}" get --export -o=json \
            deployment,ingress,daemonset,secrets,configmap,service,serviceaccount,statefulsets,pod,endpoints,customresourcedefinition,events,networkpolicies,persistentvolumeclaims,persistentvolumes,replicasets,replicationcontrollers,statefulsets,storageclasses | \
        jq '.items[]' -c | \
        grep "$search_query" | \
        jq -r  '. | [.kind, .metadata.name] | @tsv' | \
        awk -v prefix="$ns" '{print "kubectl get -n " prefix " " $0}'
    done
}

# [kcl] context list
alias kcl='kubectl config get-contexts'

# [kcs] context set
kcs() {
    context="$(kubectl config get-contexts | _inline_fzf | awk '{print $1}')"
    eval kubectl config set current-context "${context}"
}

# [kcns] context set default namespace
kcns() {
    local ns=$1
    if [ ! -n "$1" ]; then
        ns="$(kubectl get ns | _inline_fzf | awk '{print $1}')"
    fi
    eval kubectl config set-context "$(kubectl config current-context)" --namespace="${ns}"
}

# [kwns] watch pods in a namespace
kwns() {
    local ns=""
    ns=$(kubectl get ns | _inline_fzf | awk '{print $1}')
    watch kubectl get pod -n "$ns"
}

# [khelp] show this help message
khelp() {
    echo "Usage of fubectl"
    echo
    echo "Reduces repetitive interactions with kubectl"
    echo "Find more information at https://github.com/kubermatic/fubectl"
    echo
    echo "Usage:"
    if [ -n "$ZSH_VERSION" ]
    then
        grep -E '^# \[.+\]' "${(%):-%x}"
    else
        grep -E '^# \[.+\]' "${BASH_SOURCE[0]}"
    fi
}
